// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –∏ –¥–æ—Å–∫–∏
const game = new Chess();
const board = Chessboard('board', {
    position: 'start',
    draggable: true,
    pieceTheme: 'https://chessboardjs.com/img/chesspieces/wikipedia/{piece}.png',
    onDrop: handleMove
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–æ–≤
function handleMove(source, target) {
    const move = game.move({
        from: source,
        to: target,
        promotion: 'q'
    });
    
    if (move === null) return 'snapback';
    updateStatus();
}

// –ê–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ü–∏–∏
document.getElementById('analyze-btn').addEventListener('click', () => {
    if (game.game_over()) {
        alert('–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é.');
        return;
    }
    
    const resultDiv = document.getElementById('result');
    resultDiv.innerHTML = '<p>–ê–Ω–∞–ª–∏–∑... (—ç—Ç–æ –∑–∞–π–º—ë—Ç 10-20 —Å–µ–∫—É–Ω–¥)</p>';
    
    try {
        const stockfish = new Worker('https://unpkg.com/stockfish.js@10.0.2/src/stockfish.js');
        
        stockfish.onmessage = function(e) {
            if (e.data.startsWith('bestmove')) {
                const bestMove = e.data.split(' ')[1];
                if (bestMove && bestMove !== '(none)') {
                    game.move(bestMove);
                    board.position(game.fen());
                    resultDiv.innerHTML = `
                        <p>–õ—É—á—à–∏–π —Ö–æ–¥: <strong>${bestMove}</strong></p>
                        <p>–û—Ü–µ–Ω–∫–∞ –ø–æ–∑–∏—Ü–∏–∏: ${getEvaluation(e.data)}</p>
                    `;
                }
                stockfish.terminate();
            }
        };
        
        stockfish.postMessage(`position fen ${game.fen()}`);
        stockfish.postMessage('go depth 16');
    } catch (error) {
        document.getElementById('result').innerHTML = '<p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–≤–∏–∂–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</p>';
        console.error('Stockfish error:', error);
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏
function getEvaluation(output) {
    const score = output.match(/score cp (-?\d+)/);
    if (score) {
        const value = parseInt(score[1]) / 100;
        return value > 0 ? `+${value.toFixed(1)}` : value.toFixed(1);
    }
    return "N/A";
}

// –°–±—Ä–æ—Å –¥–æ—Å–∫–∏
document.getElementById('reset-btn').addEventListener('click', () => {
    game.reset();
    board.start();
    document.getElementById('result').innerHTML = '';
});

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
document.getElementById('theme-btn').addEventListener('click', () => {
    document.body.classList.toggle('dark');
    const themeBtn = document.getElementById('theme-btn');
    themeBtn.textContent = document.body.classList.contains('dark') 
        ? '‚òÄÔ∏è –í–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É' 
        : 'üåô –í–∫–ª—é—á–∏—Ç—å —Ç—ë–º–Ω—É—é —Ç–µ–º—É';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å–∫—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    board.position(game.fen());
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã
function updateStatus() {
    if (game.in_checkmate()) alert('–®–∞—Ö –∏ –º–∞—Ç!');
    if (game.in_draw()) alert('–ù–∏—á—å—è!');
}
